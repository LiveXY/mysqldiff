#!/usr/bin/env node

var program = require('commander');
var DB = require("./DB");

var db1, db2, all = {};
var db1Tip = '--db1=dbuser:dbpassword@dbhost~database#dbport';
var db2Tip = '--db2=dbuser:dbpassword@dbhost~database#dbport+sshuser:sshpassword@sshhost#sshport';
var typeTip = '--type=table|procedure|function';

program
	.on('--help', function(){
		console.log('  实例:');
		console.log('');
		console.log('    mysqldiff --db1=root:password@127.0.0.1~database1 --db2=root:password@127.0.0.1~database2');
		console.log('');
	})
	.version('0.0.1')
	.description('mysql 数据库表结构，存储过程，函数对比工具，差异生成SQL。')
	.option('--db1 <server>', db1Tip)
	.option('--db2 <server>', db2Tip)
	.option('--type <type>', typeTip)
	.parse(process.argv);

function check() {
	if (!program.db1 || program.db1.indexOf(':') == -1 || program.db1.indexOf('@') == -1 || program.db1.indexOf('~') == -1) return console.log('--db1 参数错误！', db1Tip);
	if (!program.db2 || program.db2.indexOf(':') == -1 || program.db2.indexOf('@') == -1 || program.db2.indexOf('~') == -1) return console.log('--db2 参数错误！', db2Tip);
	if (program.type && !/^(table|procedure|function)$/i.test(program.type)) return console.log('--type 参数错误！', typeTip);
	return true;
}
function start() {
	if (!check()) return;
	console.log('-- 正在连接数据库：db1 & db2...');
	db1 = new DB(program.db1);
	db2 = new DB(program.db2);
	db1.connect().then(function(v){
		if (!v) return console.log('-- 数据库db1：连接成功！');
		console.error('数据库db1连接失败：', v.message);
		exit();
	}).then(db2.connect).then(function(v){
		if (v) console.error('-- 数据库db2连接失败：', v.message);
		else console.log('-- 数据库db2：连接成功！');
		if (v) exit();
		Promise.all([getTables(), getParameterss()]).then(allDesc).then(diff).then(function(v) {
			if (v.sqlUp && (program.type == 'table' || !program.type)) {
				console.log('-- 数据库db2需要更新表结构如下：');
				for(var k in v.sql) console.log(v.sql[k]);
			}
			if (v.procUp && (program.type == 'procedure' || !program.type)) {
				console.log('-- 数据库db2需要更新存储过程如下：');
				for(var k in v.proc) console.log(v.proc[k]);
			}
			if (v.funcUp && (program.type == 'function' || !program.type)) {
				console.log('-- 数据库db2需要更新函数如下：');
				for(var k in v.func) console.log(v.func[k]);
			}
			if (!v.sqlUp && !v.procUp && !v.funcUp) console.log('-- 已经是最新，不需要更新！');
			exit();
		});
	});
}
function diff(v) {
	var d = { sql: {}, proc: {}, func: {}, sqlUp: 0, procUp: 0, funcUp: 0 };
	if (program.type == 'table' || !program.type) for(var i = 0, len = v[0][0].length; i < len; i++) {
		var name = v[0][0][i];
		var table1 = v[2][name];
		var table2 = v[3][name];
		var sql = diffTable(name, table1, table2);
		if (sql && sql.length > 0) {
			d.sql[name] = sql;
			d.sqlUp = 1;
		}
	}
	if (program.type == 'procedure' || !program.type) for(var i = 0, len = v[1][0].length; i < len; i++) {
		var name = v[1][0][i];
		var proc1 = v[2][name];
		var proc2 = v[3][name];
		var sql = diffProcedure(name, proc1, proc2, 'PROCEDURE');
		if (sql && sql.length > 0) {
			d.proc[name] = sql;
			d.procUp = 1;
		}
	}
	if (program.type == 'function' || !program.type) for(var i = 0, len = v[1][1].length; i < len; i++) {
		var name = v[1][1][i];
		var proc1 = v[2][name];
		var proc2 = v[3][name];
		var sql = diffProcedure(name, proc1, proc2, 'FUNCTION');
		if (sql && sql.length > 0) {
			d.func[name] = sql;
			d.funcUp = 1;
		}
	}
	return Promise.resolve(d);
}
function diffProcedure(name, proc1, proc2, ex) {
	var p1 = filterProcedure(proc1);
	var p2 = filterProcedure(proc2);
	if (p1 == p2) return null;

	if (p1 != '' && p2 == '') return 'DELIMITER ;;\n'+changeProcedure(proc1, proc2)+' ;;\nDELIMITER ;\n';
	if (p1 == '' && p2 != '') return 'DROP '+ex+' `' + name + '`;\n';

	return 'DROP '+ex+' `' + name + '`;\nDELIMITER ;;\n'+changeProcedure(proc1, proc2)+' ;;\nDELIMITER ;\n';
}
function changeProcedure(proc1, proc2) {
	if (!proc2) return proc1;
	var definer = proc2.match(/ DEFINER=(`.*`@`.*`) /i)[1];
	proc1 = proc1.replace(/ DEFINER=(`.*`@`.*`) /g, ' DEFINER='+definer+' ');
	return proc1;
}
function filterProcedure(proc) {
	if (!proc) return '';
	proc = proc.replace(/ DEFINER=.* FUNCTION/g, ' FUNCTION');
	proc = proc.replace(/ DEFINER=.* PROCEDURE/g, ' PROCEDURE');
	return proc.trim();
}
function diffTable(name, table1, table2) {
	var t1 = filterTable(table1);
	var t2 = filterTable(table2);
	if (t1 == t2) return null;

	if (t1 != '' && t2 == '') return table1 + ';\n';
	if (t1 == '' && t2 != '') return 'DROP TABLE `' + name + '`;\n';

	return diffTableField(name, table1, table2);
}
function diffTableField(name, table1, table2) {
	var t1 = table1.split('\n');
	var t2 = table2.split('\n');
	if (t1.length < 3 || t2.length < 3) return '';

	var col = [], col1 = {}, col2 = {};
	var key = [], key1 = {}, key2 = {};
	var pk1 = '', pk2 = '';

	for (var i=1, len = t1.length-1; i<len; i++) {
		var row = t1[i].trim(), l = row.length-1;
		if (row.lastIndexOf(',') == l) row = row.substring(0, l);
		var field = row.indexOf('`') == 0 ? row.split(' ')[0] : false;
		var pkey = row.indexOf('PRIMARY KEY ') == 0 ? row.substring(12) : false;
		var ikey = row.indexOf('KEY `') == 0 ? row.substring(4) : false;
		if (field) { col1[field] = row; if (col.indexOf(field) == -1) col.push(field); }
		if (pkey) pk1 = pkey;
		if (ikey) { key1[ikey] = 1; if (key.indexOf(ikey) == -1) key.push(ikey); }
	}

	for (var i=1, len = t2.length-1; i<len; i++) {
		var row = t2[i].trim(), l = row.length-1;
		if (row.lastIndexOf(',') == l) row = row.substring(0, l);
		var field = row.indexOf('`') == 0 ? row.split(' ')[0] : false;
		var pkey = row.indexOf('PRIMARY KEY ') == 0 ? row.substring(12) : false;
		var ikey = row.indexOf('KEY `') == 0 ? row.substring(4) : false;
		if (field) { col2[field] = row; if (col.indexOf(field) == -1) col.push(field); }
		if (pkey) pk2 = pkey;
		if (ikey) { key2[ikey] = 1; if (key.indexOf(ikey) == -1) key.push(ikey); }
	}

	var sql = '';
	for(var i=0, len = col.length; i<len; i++) {
		var c = col[i], c1 = col1[c], c2 = col2[c];
		var c3 = filterField(c1), c4 = filterField(c2);
		if (c3 == c4) continue;

		if (c3 != '' && c4 == '') {
			sql += 'ALTER TABLE `'+name+'` ADD COLUMN '+c1+';\n';
			continue;
		}
		if (c3 == '' && c4 != '') {
			sql += 'ALTER TABLE `'+name+'` DROP COLUMN '+c+';\n';
			continue;
		}
		sql += 'ALTER TABLE `'+name+'` CHANGE COLUMN '+c+' '+c1+';\n';
	}

	if (pk1 != '' && pk2 == '') sql += 'ALTER TABLE `'+name+'` ADD PRIMARY KEY '+pk1+';\n';
	if (pk1 == '' && pk2 != '') sql += 'ALTER TABLE `'+name+'` DROP PRIMARY KEY;\n';
	if (pk1 != '' && pk2 != '' && pk1 != pk2) sql += 'ALTER TABLE `'+name+'` DROP PRIMARY KEY,ADD PRIMARY KEY '+pk2+';\n';

	for(var i=0, len = key.length; i<len; i++) {
		var k = key[i], k1 = key1[k], k2 = key2[k];
		if (k1 == k2) continue;

		if (k1 && !k2) {
			sql += 'ALTER TABLE `'+name+'` ADD INDEX '+k+';\n';
			continue;
		}
		if (!k1 && k2) {
			var kname = k.split(' ')[0];
			sql += 'ALTER TABLE `'+name+'` DROP INDEX '+kname+';\n';
			continue;
		}
	}

	return sql;
}
function filterField(field) {
	if (!field) return '';
	field = field.replace(/ COMMENT '.*'/g, '');
	field = field.replace(/ COMMENT='.*'/g, '');
	return field.trim();
}
function filterTable(table) {
	if (!table) return '';
	table = table.replace(/AUTO_INCREMENT=.* /g, '');
	table = table.replace(/ CHECKSUM=1/g, '');
	table = table.replace(/ DELAY_KEY_WRITE=1/g, '');
	table = table.replace(/ ROW_FORMAT=DYNAMIC/g, '');
	table = table.replace(/ DEFAULT/g, '');
	table = filterField(table);
	return table.trim();
}
function allDesc(v) {
	console.log('-- 开始比较db1 & db2的差异...');
	var list = [], objs = [];
	for(var k in v[0][1]) { //db1 tables(1)
		list.push(db1.showCreateTable(k));
		objs.push('0-' + 1 + '-' + k);
	}
	for(var k in v[0][2]) { //db2 tables(1)
		list.push(db2.showCreateTable(k));
		objs.push('1-' + 1 + '-' + k);
	}
	for(var k in v[1][2]) { //db1 procedure(2)
		var proc = v[1][0].indexOf(k) != -1;
		var func = v[1][1].indexOf(k) != -1;
		if (proc) {
			list.push(db1.showCreateProcedure(k));
			objs.push('0-' + 2 + '-' + k);
		}
		if (func) {
			list.push(db1.showCreateFunction(k));
			objs.push('0-' + 3 + '-' + k);
		}
	}
	for(var k in v[1][3]) { //db2 procedure(2)
		var proc = v[1][0].indexOf(k) != -1;
		var func = v[1][1].indexOf(k) != -1;
		if (proc) {
			list.push(db2.showCreateProcedure(k));
			objs.push('1-' + 2 + '-' + k);
		}
		if (func) {
			list.push(db2.showCreateFunction(k));
			objs.push('1-' + 3 + '-' + k);
		}
	}
	return Promise.all(list).then(function(v2){
		v.push({}); v.push({});
		for(var i = 0, len = v2.length; i < len; i++) {
			var types = objs[i].split('-');
			var val = v2[i];
			var s = parseInt(types[0]) + 2;
			v[s][types[2]] = val;
		}
		return v;
	});
}
function getTables() {
	var tables = [[], {}, {}];
	console.log('-- 正在获取数据表...');
	return Promise.all([db1.tables(), db2.tables()]).then(function(v){
		for(var i = 0, len = v[0].length; i < len; i++) {
			var table = v[0][i].tabName;
			tables[0].push(table);
			tables[1][table] = {};
		}
		console.log('-- db1获取数据表', v[0].length, '个！');
		for(var i = 0, len = v[1].length; i < len; i++) {
			var table = v[1][i].tabName;
			if (tables[0].indexOf(table) == -1) tables[0].push(table);
			tables[2][table] = {};
		}
		tables[0].sort();
		console.log('-- db2获取数据表', v[1].length, '个！');
		console.log('-- db1 & db2 合并数据表', tables[0].length, '个！');
		return tables;
	});
}
function getParameterss() {
	var parameters = [[], [], {}, {}];
	console.log('-- 正在获取存储过程和函数...');
	return Promise.all([db1.parameters(), db2.parameters()]).then(function(v){
		for(var i = 0, len = v[0].length; i < len; i++) {
			var parameter = v[0][i].parName;
			var type = v[0][i].type;
			if (type == 'PROCEDURE') parameters[0].push(parameter);
			if (type == 'FUNCTION')  parameters[1].push(parameter);
			parameters[2][parameter] = {};
		}
		console.log('-- db1获取存储过程和函数', v[0].length, '个！');
		for(var i = 0, len = v[1].length; i < len; i++) {
			var parameter = v[1][i].parName;
			var type = v[1][i].type;
			if (type == 'PROCEDURE' && parameters[0].indexOf(parameter) == -1)
				parameters[0].push(parameter);
			if (type == 'FUNCTION' && parameters[1].indexOf(parameter) == -1)
				parameters[1].push(parameter);
			parameters[3][parameter] = {};
		}
		console.log('-- db2获取存储过程和函数', v[1].length, '个！');
		console.log('-- db1 & db2 合并存储过程', parameters[0].length, '个！');
		console.log('-- db1 & db2 合并函数', parameters[1].length, '个！');
		return parameters;
	});
}

function exit() {
	if (!db1 && !db2) process.exit();
	var list = [];
	if (db1) list.push(db1.close());
	if (db2) list.push(db2.close());
	Promise.all(list).then(function(v){
		setTimeout(process.exit, 1000);
	})
}

start();